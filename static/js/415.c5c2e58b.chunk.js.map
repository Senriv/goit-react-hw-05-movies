{"version":3,"file":"static/js/415.c5c2e58b.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","components/MovieList/MovieList.styled.jsx","components/Button/Button.styled.jsx","components/Button/Button.jsx","components/MovieList/MovieList.jsx","pages/Home.jsx","services/themoviedb-api.js"],"sourcesContent":["import { InfinitySpin } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <InfinitySpin width=\"200\" color=\"#000\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  grid-gap: 10px;\n`;\n\nexport const Item = styled.li`\n  padding: 10px;\n  border-radius: 5px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.3s ease;\n\n  &:hover {\n    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);\n  }\n`;\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n  color: #007bff;\n  display: block;\n  padding: 10px;\n  border-radius: 5px;\n\n  &:hover {\n    background-color: #eaf2ff;\n  }\n`;\n\nexport const BtnWrapper = styled.div`\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-evenly;\n`;\n","import styled from '@emotion/styled';\n\nexport const Btn = styled.button`\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  padding: 10px 20px;\n  cursor: pointer;\n  border-radius: 5px;\n  transition: background-color 0.3s ease;\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Btn } from './Button.styled';\n\nconst Button = ({ btnName, onClick }) => {\n  return (\n    <Btn onClick={onClick} type=\"button\">\n      {btnName}\n    </Btn>\n  );\n};\n\nexport default Button;\n\nButton.propTypes = {\n  btnName: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { List, Item, ItemLink, BtnWrapper } from './MovieList.styled';\nimport Button from '../Button/Button';\n\nconst MovieList = ({\n  location,\n  movieList,\n  paginationPage,\n  totalPages,\n  onLoadNextPage,\n  onLoadPreviousPage,\n  onToStartPage,\n}) => {\n  return (\n    <>\n      <List>\n        {movieList.map(({ id, title }) => (\n          <Item key={id}>\n            <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </ItemLink>\n          </Item>\n        ))}\n      </List>\n      <BtnWrapper>\n        {movieList.length !== 0 && paginationPage > 1 && (\n          <>\n            <Button btnName={'Start page'} onClick={onToStartPage} />\n            <Button btnName={'Previous page'} onClick={onLoadPreviousPage} />\n          </>\n        )}\n        {movieList.length !== 0 && paginationPage < totalPages && (\n          <Button btnName={'Next page'} onClick={onLoadNextPage} />\n        )}\n      </BtnWrapper>\n    </>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  location: PropTypes.object.isRequired,\n  movieList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n  paginationPage: PropTypes.number.isRequired,\n  totalPages: PropTypes.number.isRequired,\n  onLoadNextPage: PropTypes.func.isRequired,\n  onLoadPreviousPage: PropTypes.func.isRequired,\n  onToStartPage: PropTypes.func.isRequired,\n};\n","import { useEffect, useState, useRef } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchData } from '../services/themoviedb-api';\nimport MovieList from 'components/MovieList/MovieList';\nimport Loader from 'components/Loader/Loader';\n\nconst Home = () => {\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movieList, setMovieList] = useState([]);\n  const totalPages = useRef(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let paginationPage = Number(searchParams.get('page'));\n  if (paginationPage === 0) {\n    paginationPage = 1;\n  }\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData(`/trending/movie/week`, paginationPage).then(r => {\n      if (r.status !== 200) {\n        throw new Error(r.statusText);\n      } else {\n        totalPages.current = r.data.total_pages;\n        setMovieList(r.data.results);\n        setIsLoading(false);\n      }\n    });\n  }, [paginationPage]);\n\n  const onLoadNextPage = () => {\n    paginationPage = paginationPage + 1;\n    setSearchParams({ page: paginationPage });\n  };\n\n  const onLoadPreviousPage = () => {\n    paginationPage = paginationPage - 1;\n    setSearchParams({ page: paginationPage });\n  };\n\n  const onToStartPage = () => {\n    paginationPage = 1;\n    setSearchParams({ page: paginationPage });\n  };\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {movieList.length !== 0 && (\n        <MovieList\n          location={location}\n          movieList={movieList}\n          paginationPage={paginationPage}\n          totalPages={totalPages.current}\n          onLoadNextPage={onLoadNextPage}\n          onLoadPreviousPage={onLoadPreviousPage}\n          onToStartPage={onToStartPage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(LAST_URL, page = 1, query = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = 'a1d23687457ad2294666771e745dbcef';\n    let URL = BASE_URL + LAST_URL + `?api_key=${API_KEY}`;\n\n    if (query) {\n      URL = URL + `&query=${query.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n"],"names":["width","color","List","styled","Item","ItemLink","Link","BtnWrapper","Btn","btnName","onClick","type","location","movieList","paginationPage","totalPages","onLoadNextPage","onLoadPreviousPage","onToStartPage","map","id","title","to","state","from","length","useLocation","useSearchParams","searchParams","setSearchParams","useState","setMovieList","useRef","isLoading","setIsLoading","Number","get","useEffect","fetchData","then","r","status","Error","statusText","current","data","total_pages","results","page","LAST_URL","query","URL","trim","axios","responce","Notiflix","message"],"sourceRoot":""}