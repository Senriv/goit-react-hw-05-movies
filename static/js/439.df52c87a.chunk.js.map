{"version":3,"file":"static/js/439.df52c87a.chunk.js","mappings":"6JAUA,IARe,WACb,OACE,0BACE,SAAC,KAAD,CAAcA,MAAM,MAAMC,MAAM,UAGrC,C,8LCLYC,GAAWC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,oIAQRE,EAAUF,EAAAA,EAAAA,IAAH,mNAUPG,EAAYH,EAAAA,EAAAA,IAAH,uGAOTI,EAAQJ,EAAAA,EAAAA,IAAH,0CAILK,EAAYL,EAAAA,EAAAA,GAAH,oEAKTM,EAAYN,EAAAA,EAAAA,EAAH,oEAKTO,EAAgBP,EAAAA,EAAAA,GAAH,mEAKbQ,EAAeR,EAAAA,EAAAA,EAAH,iEAKZS,EAAcT,EAAAA,EAAAA,GAAH,iEAKXU,EAAaV,EAAAA,EAAAA,EAAH,oEAKVW,EAAcX,EAAAA,EAAAA,IAAH,6CAIXY,EAAUZ,EAAAA,EAAAA,EAAH,0FAMPa,EAAYb,EAAAA,EAAAA,GAAH,0EAMTc,EAAWd,EAAAA,EAAAA,GAAH,+CAIRe,GAAWf,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,8I,SCmBrB,EA9EqB,WAAO,IAAD,IACzB,GAAkCgB,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAQ,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAEzCC,EAAAA,EAAAA,YAAU,WACRN,GAAa,IACbO,EAAAA,EAAAA,GAAU,UAAD,OAAWV,GAAW,EAAG,IAAIW,MAAK,SAAAC,GAEzC,GADAT,GAAa,GACI,MAAbS,EAAEC,OACJ,MAAM,IAAIC,MAAMF,EAAEG,YAElBhB,EAAaa,EAAEI,MACfb,GAAa,EAEhB,GACF,GAAE,CAACH,IAEJ,IACEiB,EAMEnB,EANFmB,OACAC,EAKEpB,EALFoB,eACAC,EAIErB,EAJFqB,SACAC,EAGEtB,EAHFsB,YACAC,EAEEvB,EAFFuB,aAIIC,GAFFxB,EADFyB,aAG+B,GAAM,KAAKC,QAAQ,GAG9CC,EAASL,EA9Ba,kCA6BeA,EACCM,EAE5C,OACE,gCACGxB,IAAa,SAACyB,EAAA,EAAD,KACd,SAAC/C,EAAD,CAAUgD,GAAItB,EAAd,SAAwB,oBACxB,UAACvB,EAAD,YACE,SAACC,EAAD,CAAW6C,IAAKJ,EAAQK,IAAI,YAC5B,UAAC7C,EAAD,YACE,UAACC,EAAD,WACGgC,EAAe,KAAGG,GAAgBA,EAAaU,MAAM,EAAG,GAAG,QAE9D,UAAC5C,EAAD,WAAW,eAAamC,EAAQ,QAChC,SAAClC,EAAD,UAAe,cACf,SAACC,EAAD,UAAe8B,KACf,SAAC7B,EAAD,UAAa,WACZ2B,IACC,SAAC1B,EAAD,UACG0B,EAAOe,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,gBAK7C,UAAC1C,EAAD,YACE,SAACC,EAAD,UAAS,4BACT,UAACC,EAAD,YACE,SAACC,EAAD,WACE,SAACC,EAAD,CAAUgC,GAAG,OAAOrB,MAAOH,EAASG,MAApC,SAA2C,YAI7C,SAACZ,EAAD,WACE,SAACC,EAAD,CAAUgC,GAAG,UAAUrB,MAAOH,EAASG,MAAvC,SAA8C,qBAMpD,SAAC,EAAA4B,SAAD,WACE,SAAC,KAAD,QAIP,C,qHChGM,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,WAAyB0B,GAAzB,gGAAmCC,EAAnC,+BAA0C,EAAGC,EAA7C,+BAAqD,GAArD,SAICC,EAJD,+BAIkBH,EAAX,mBADM,oCAGZE,IACFC,GAAS,iBAAaD,EAAME,SAE1BH,IACFE,GAAS,gBAAYF,IAVpB,UAYoBI,EAAAA,EAAAA,IAAUF,GAZ9B,eAYGG,EAZH,yBAaIA,GAbJ,kCAeHC,IAAAA,OAAAA,QAAwB,KAAMC,SAf3B,kF","sources":["components/Loader/Loader.jsx","pages/MovieDetails.styled.jsx","pages/MovieDetails.jsx","services/themoviedb-api.js"],"sourcesContent":["import { InfinitySpin } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <InfinitySpin width=\"200\" color=\"#000\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const LinkBack = styled(Link)`\n  display: block;\n  margin-bottom: 20px;\n  color: #007bff;\n  text-decoration: none;\n  font-size: 18px;\n`;\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 250px 1fr;\n  grid-gap: 20px;\n  background-color: #fff;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  padding: 20px;\n`;\n\nexport const PosterImg = styled.img`\n  display: block;\n  max-width: 100%;\n  border-radius: 5px;\n  width: 300px;\n`;\n\nexport const Inner = styled.div`\n  padding: 10px;\n`;\n\nexport const FilmTitle = styled.h2`\n  font-size: 24px;\n  margin-bottom: 10px;\n`;\n\nexport const UserScore = styled.p`\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const OwerviewTitle = styled.h3`\n  font-size: 18px;\n  margin-bottom: 5px;\n`;\n\nexport const OwerviewText = styled.p`\n  font-size: 16px;\n  line-height: 1.6;\n`;\n\nexport const GenresTitle = styled.h3`\n  font-size: 18px;\n  margin-top: 20px;\n`;\n\nexport const GenresText = styled.p`\n  font-size: 16px;\n  margin-bottom: 20px;\n`;\n\nexport const LinkWrapper = styled.div`\n  margin-top: 30px;\n`;\n\nexport const LinkSub = styled.p`\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n\nexport const LinkItems = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const LinkItem = styled.li`\n  margin-bottom: 5px;\n`;\n\nexport const LinkLink = styled(Link)`\n  text-decoration: none;\n  color: #007bff;\n  font-size: 16px;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import { Suspense, useEffect, useState } from 'react';\nimport { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { fetchData } from '../services/themoviedb-api';\nimport Loader from 'components/Loader/Loader';\nimport plugImg from '../images/plug.jpg';\nimport {\n  LinkBack,\n  Wrapper,\n  PosterImg,\n  Inner,\n  FilmTitle,\n  UserScore,\n  OwerviewTitle,\n  OwerviewText,\n  GenresTitle,\n  GenresText,\n  LinkWrapper,\n  LinkSub,\n  LinkItems,\n  LinkItem,\n  LinkLink,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const [movieData, setMovieData] = useState({});\n  const { movieId } = useParams();\n  const BASE_IMAGE_ENDPOINT = 'https://image.tmdb.org/t/p/w500';\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/';\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData(`/movie/${movieId}`, 0, '').then(r => {\n      setIsLoading(false);\n      if (r.status !== 200) {\n        throw new Error(r.statusText);\n      } else {\n        setMovieData(r.data);\n        setIsLoading(false);\n      }\n    });\n  }, [movieId]);\n\n  const {\n    genres,\n    original_title,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = movieData;\n\n  const userScr = ((vote_average / 10) * 100).toFixed(0);\n\n  const pathToPoster = BASE_IMAGE_ENDPOINT + poster_path;\n  const imgSrc = poster_path ? pathToPoster : plugImg;\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <LinkBack to={backLink}>&#8592; Go back</LinkBack>\n      <Wrapper>\n        <PosterImg src={imgSrc} alt=\"Poster\" />\n        <Inner>\n          <FilmTitle>\n            {original_title} ({release_date && release_date.slice(0, 4)})\n          </FilmTitle>\n          <UserScore>User Score: {userScr}%</UserScore>\n          <OwerviewTitle>Owerview</OwerviewTitle>\n          <OwerviewText>{overview}</OwerviewText>\n          <GenresTitle>Genres</GenresTitle>\n          {genres && (\n            <GenresText>\n              {genres.map(({ name }) => name).join(',  ')}\n            </GenresText>\n          )}\n        </Inner>\n      </Wrapper>\n      <LinkWrapper>\n        <LinkSub>Additional information</LinkSub>\n        <LinkItems>\n          <LinkItem>\n            <LinkLink to=\"cast\" state={location.state}>\n              Cast\n            </LinkLink>\n          </LinkItem>\n          <LinkItem>\n            <LinkLink to=\"reviews\" state={location.state}>\n              Reviews\n            </LinkLink>\n          </LinkItem>\n        </LinkItems>\n      </LinkWrapper>\n      <Suspense>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(LAST_URL, page = 1, query = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = 'a1d23687457ad2294666771e745dbcef';\n    let URL = BASE_URL + LAST_URL + `?api_key=${API_KEY}`;\n\n    if (query) {\n      URL = URL + `&query=${query.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n"],"names":["width","color","LinkBack","styled","Link","Wrapper","PosterImg","Inner","FilmTitle","UserScore","OwerviewTitle","OwerviewText","GenresTitle","GenresText","LinkWrapper","LinkSub","LinkItems","LinkItem","LinkLink","useState","movieData","setMovieData","movieId","useParams","isLoading","setIsLoading","location","useLocation","backLink","state","from","useEffect","fetchData","then","r","status","Error","statusText","data","genres","original_title","overview","poster_path","release_date","userScr","vote_average","toFixed","imgSrc","plugImg","Loader","to","src","alt","slice","map","name","join","Suspense","LAST_URL","page","query","URL","trim","axios","responce","Notiflix","message"],"sourceRoot":""}