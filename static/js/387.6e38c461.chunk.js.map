{"version":3,"file":"static/js/387.6e38c461.chunk.js","mappings":"6JAUA,IARe,WACb,OACE,0BACE,SAAC,KAAD,CAAcA,MAAM,MAAMC,MAAM,UAGrC,C,wJCNYC,EAAUC,EAAAA,EAAAA,IAAH,yIAOPC,EAAQD,EAAAA,EAAAA,GAAH,2FAMLE,EAAQF,EAAAA,EAAAA,GAAH,4DAKLG,EAAOH,EAAAA,EAAAA,GAAH,gDAIJI,EAAWJ,EAAAA,EAAAA,GAAH,sFAMRK,EAAWL,EAAAA,EAAAA,EAAH,iE,SCsBrB,EAvCgB,WACd,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAuCE,EAAAA,EAAAA,UAAS,IAAhD,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbE,EAAAA,EAAAA,GAAU,UAAD,OAAWR,EAAX,YAA8B,EAAG,IAAIS,MAAK,SAAAC,GACjD,GAAiB,MAAbA,EAAEC,OACJ,MAAM,IAAIC,MAAMF,EAAEG,YAElBT,EAAgBM,EAAEI,KAAKC,SACvBT,GAAa,EAEhB,GACF,GAAE,CAACN,KAGF,UAACP,EAAD,WACGY,IAAa,SAACW,EAAA,EAAD,IACU,IAAvBb,EAAYc,QACX,SAACtB,EAAD,UAAO,+CAEP,SAACA,EAAD,UAAO,YAERQ,EAAYc,SACX,SAACrB,EAAD,UACGO,EAAYe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,UAACxB,EAAD,YACE,UAACC,EAAD,WAAU,WAASsB,MACnB,SAACrB,EAAD,UAAWsB,MAFFF,EADI,QAU1B,C,qHC/CM,SAAeX,EAAtB,+CAAO,OAAP,oBAAO,WAAyBc,GAAzB,gGAAmCC,EAAnC,+BAA0C,EAAGC,EAA7C,+BAAqD,GAArD,SAICC,EAJD,+BAIkBH,EAAX,mBADM,oCAGZE,IACFC,GAAS,iBAAaD,EAAME,SAE1BH,IACFE,GAAS,gBAAYF,IAVpB,UAYoBI,EAAAA,EAAAA,IAAUF,GAZ9B,eAYGG,EAZH,yBAaIA,GAbJ,kCAeHC,IAAAA,OAAAA,QAAwB,KAAMC,SAf3B,kF","sources":["components/Loader/Loader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/themoviedb-api.js"],"sourcesContent":["import { InfinitySpin } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <InfinitySpin width=\"200\" color=\"#000\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  background-color: #fff;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  padding: 20px;\n`;\n\nexport const Title = styled.h4`\n  font-size: 24px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const Items = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 30px;\n`;\n\nexport const ItemName = styled.h4`\n  font-size: 18px;\n  color: #007bff;\n  margin-bottom: 5px;\n`;\n\nexport const ItemText = styled.p`\n  font-size: 16px;\n  line-height: 1.6;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchData } from '../../services/themoviedb-api';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Wrapper,\n  Title,\n  Items,\n  Item,\n  ItemName,\n  ItemText,\n} from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieRevews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData(`/movie/${movieId}/reviews`, 0, '').then(r => {\n      if (r.status !== 200) {\n        throw new Error(r.statusText);\n      } else {\n        setMovieReviews(r.data.results);\n        setIsLoading(false);\n      }\n    });\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n      {movieRevews.length === 0 ? (\n        <Title>We don't have any reviews for this movie.</Title>\n      ) : (\n        <Title>Reviews</Title>\n      )}\n      {movieRevews.length && (\n        <Items>\n          {movieRevews.map(({ id, author, content }) => (\n            <Item key={id}>\n              <ItemName>Author: {author}</ItemName>\n              <ItemText>{content}</ItemText>\n            </Item>\n          ))}\n        </Items>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Reviews;\n","import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(LAST_URL, page = 1, query = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = 'a1d23687457ad2294666771e745dbcef';\n    let URL = BASE_URL + LAST_URL + `?api_key=${API_KEY}`;\n\n    if (query) {\n      URL = URL + `&query=${query.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n"],"names":["width","color","Wrapper","styled","Title","Items","Item","ItemName","ItemText","movieId","useParams","useState","movieRevews","setMovieReviews","isLoading","setIsLoading","useEffect","fetchData","then","r","status","Error","statusText","data","results","Loader","length","map","id","author","content","LAST_URL","page","query","URL","trim","axios","responce","Notiflix","message"],"sourceRoot":""}