{"version":3,"file":"static/js/736.d64a3229.chunk.js","mappings":"oRAEaA,EAAUC,EAAAA,EAAAA,IAAH,yIAOPC,EAAQD,EAAAA,EAAAA,GAAH,2FAMLE,EAAQF,EAAAA,EAAAA,GAAH,kJAOLG,EAAOH,EAAAA,EAAAA,GAAH,sIAQJI,EAAUJ,EAAAA,EAAAA,IAAH,yHAQPK,EAAWL,EAAAA,EAAAA,GAAH,wFAMRM,EAAWN,EAAAA,EAAAA,EAAH,oF,SCerB,EA5Ca,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAbAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbE,EAAAA,EAAAA,GAAU,UAAD,OAAWR,EAAX,YAA8B,EAAG,IAAIS,MAAK,SAAAC,GAEjD,GADAJ,GAAa,GACI,MAAbI,EAAEC,OACJ,MAAM,IAAIC,MAAMF,EAAEG,YAElBT,EAAaM,EAAEI,KAAKC,MACpBT,GAAa,EAEhB,GACF,GAAE,CAACN,KAGF,UAACR,EAAD,WACGa,IAAa,SAACW,EAAA,EAAD,IACQ,IAArBb,EAAUc,QAAe,SAACvB,EAAD,UAAO,aAAkB,SAACA,EAAD,UAAO,SACzDS,EAAUc,SACT,SAACtB,EAAD,UACGQ,EAAUe,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,GAAIC,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,aAAxB,OACb,UAAC1B,EAAD,WACG0B,GACC,SAACzB,EAAD,CACE0B,IAAKD,EAzBE,mCAyB8BA,EAAeE,EACpDC,IAAKJ,KAGP,SAACxB,EAAD,CAAS0B,IAAKC,EAASC,IAAI,4BAE7B,SAAC3B,EAAD,UAAWuB,KACX,UAACtB,EAAD,WAAU,aAAWoB,OAVZC,EADE,QAkBxB,C,6CChDD,IARe,WACb,OACE,0BACE,SAAC,KAAD,CAAcM,MAAM,MAAMC,MAAM,UAGrC,C,qHCLM,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBoB,GAAzB,gGAAmCC,EAAnC,+BAA0C,EAAGC,EAA7C,+BAAqD,GAArD,SAICC,EAJD,+BAIkBH,EAAX,mBADM,oCAGZE,IACFC,GAAS,iBAAaD,EAAME,SAE1BH,IACFE,GAAS,gBAAYF,IAVpB,UAYoBI,EAAAA,EAAAA,IAAUF,GAZ9B,eAYGG,EAZH,yBAaIA,GAbJ,kCAeHC,IAAAA,OAAAA,QAAwB,KAAMC,SAf3B,kF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/themoviedb-api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  background-color: #fff;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  padding: 20px;\n`;\n\nexport const Title = styled.h4`\n  font-size: 24px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n\nexport const Items = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));\n  grid-gap: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  padding: 10px;\n`;\n\nexport const ItemImg = styled.img`\n  display: block;\n  max-width: 100%;\n  border-radius: 5px;\n  width: 180px;\n  height: 270px;\n`;\n\nexport const ItemName = styled.h5`\n  font-size: 18px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n`;\n\nexport const ItemDesc = styled.p`\n  font-size: 16px;\n  color: #666;\n  margin-bottom: 10px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchData } from '../../services/themoviedb-api';\nimport Loader from 'components/Loader/Loader';\nimport plugImg from '../../images/plug.jpg';\nimport {\n  Wrapper,\n  Title,\n  Items,\n  Item,\n  ItemImg,\n  ItemName,\n  ItemDesc,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const BASE_IMAGE_URL = 'https://image.tmdb.org/t/p/w200/';\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchData(`/movie/${movieId}/credits`, 0, '').then(r => {\n      setIsLoading(false);\n      if (r.status !== 200) {\n        throw new Error(r.statusText);\n      } else {\n        setMovieCast(r.data.cast);\n        setIsLoading(false);\n      }\n    });\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n      {movieCast.length === 0 ? <Title>No cast</Title> : <Title>Cast</Title>}\n      {movieCast.length && (\n        <Items>\n          {movieCast.map(({ character, id, name, profile_path }) => (\n            <Item key={id}>\n              {profile_path ? (\n                <ItemImg\n                  src={profile_path ? BASE_IMAGE_URL + profile_path : plugImg}\n                  alt={name}\n                />\n              ) : (\n                <ItemImg src={plugImg} alt=\"Cast actor (no poster)\" />\n              )}\n              <ItemName>{name}</ItemName>\n              <ItemDesc>Caracter: {character}</ItemDesc>\n            </Item>\n          ))}\n        </Items>\n      )}\n    </Wrapper>\n  );\n};\nexport default Cast;\n","import { InfinitySpin } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div>\n      <InfinitySpin width=\"200\" color=\"#000\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import Notiflix from 'notiflix';\nimport axios from 'axios';\n\nexport async function fetchData(LAST_URL, page = 1, query = '') {\n  try {\n    const BASE_URL = `https://api.themoviedb.org/3`;\n    const API_KEY = 'a1d23687457ad2294666771e745dbcef';\n    let URL = BASE_URL + LAST_URL + `?api_key=${API_KEY}`;\n\n    if (query) {\n      URL = URL + `&query=${query.trim()}`;\n    }\n    if (page) {\n      URL = URL + `&page=${page}`;\n    }\n    const responce = await axios.get(URL);\n    return responce;\n  } catch (error) {\n    Notiflix.Notify.failure(error.message);\n  }\n}\n"],"names":["Wrapper","styled","Title","Items","Item","ItemImg","ItemName","ItemDesc","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useEffect","fetchData","then","r","status","Error","statusText","data","cast","Loader","length","map","character","id","name","profile_path","src","plugImg","alt","width","color","LAST_URL","page","query","URL","trim","axios","responce","Notiflix","message"],"sourceRoot":""}